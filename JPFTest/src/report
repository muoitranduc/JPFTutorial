JavaPathfinder v7.0 (rev ${version}) - (C) RIACS/NASA Ames Research Center


====================================================== system under test
Target.main()

====================================================== search started: 5/1/14 10:13 AM

====================================================== error 1
gov.nasa.jpf.vm.NotDeadlockedProperty
deadlock encountered:
  thread Target$Philosopher:{id:1,name:Thread-1,status:BLOCKED,priority:5,lockCount:0,suspendCount:0}
  thread Target$Philosopher:{id:2,name:Thread-2,status:BLOCKED,priority:5,lockCount:0,suspendCount:0}
  thread Target$Philosopher:{id:3,name:Thread-3,status:BLOCKED,priority:5,lockCount:0,suspendCount:0}
  thread Target$Philosopher:{id:4,name:Thread-4,status:BLOCKED,priority:5,lockCount:0,suspendCount:0}
  thread Target$Philosopher:{id:5,name:Thread-5,status:BLOCKED,priority:5,lockCount:0,suspendCount:0}
  thread Target$Philosopher:{id:6,name:Thread-6,status:BLOCKED,priority:5,lockCount:0,suspendCount:0}


====================================================== trace #1
------------------------------------------------------ transition #0 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"<root>" ,1/1,isCascaded:false}
      [3259 insn w/o sources]
  Target.java:1                  : public class Target {static class Fork {}static class Philosopher extends Thread {Fork left, right;public Philosopher(Fork left, Fork right) {this.left = left;this.right = right;}public void run() {synchronized (left) {synchronized (right) {}}}}static int nPhilosophers = 6;public static void main(String[] args) {if (args.length > 0){nPhilosophers = Integer.parseInt(args[0]);}Fork[] forks = new Fork[nPhilosophers];for (int i = 0; i < nPhilosophers; i++) {forks[i] = new Fork();}for (int i = 0; i < nPhilosophers; i++) {Philosopher p = new Philosopher(forks[i], forks[(i + 1) % nPhilosophers]);p.start();}}}
      [1 insn w/o sources]
  Target.java:1                  : public class Target {static class Fork {}static class Philosopher extends Thread {Fork left, right;public Philosopher(Fork left, Fork right) {this.left = left;this.right = right;}public void run() {synchronized (left) {synchronized (right) {}}}}static int nPhilosophers = 6;public static void main(String[] args) {if (args.length > 0){nPhilosophers = Integer.parseInt(args[0]);}Fork[] forks = new Fork[nPhilosophers];for (int i = 0; i < nPhilosophers; i++) {forks[i] = new Fork();}for (int i = 0; i < nPhilosophers; i++) {Philosopher p = new Philosopher(forks[i], forks[(i + 1) % nPhilosophers]);p.start();}}}
      [1 insn w/o sources]
  Target.java:1                  : public class Target {static class Fork {}static class Philosopher extends Thread {Fork left, right;public Philosopher(Fork left, Fork right) {this.left = left;this.right = right;}public void run() {synchronized (left) {synchronized (right) {}}}}static int nPhilosophers = 6;public static void main(String[] args) {if (args.length > 0){nPhilosophers = Integer.parseInt(args[0]);}Fork[] forks = new Fork[nPhilosophers];for (int i = 0; i < nPhilosophers; i++) {forks[i] = new Fork();}for (int i = 0; i < nPhilosophers; i++) {Philosopher p = new Philosopher(forks[i], forks[(i + 1) % nPhilosophers]);p.start();}}}
      [1 insn w/o sources]
  Target.java:1                  : public class Target {static class Fork {}static class Philosopher extends Thread {Fork left, right;public Philosopher(Fork left, Fork right) {this.left = left;this.right = right;}public void run() {synchronized (left) {synchronized (right) {}}}}static int nPhilosophers = 6;public static void main(String[] args) {if (args.length > 0){nPhilosophers = Integer.parseInt(args[0]);}Fork[] forks = new Fork[nPhilosophers];for (int i = 0; i < nPhilosophers; i++) {forks[i] = new Fork();}for (int i = 0; i < nPhilosophers; i++) {Philosopher p = new Philosopher(forks[i], forks[(i + 1) % nPhilosophers]);p.start();}}}
      [1 insn w/o sources]
  Target.java:1                  : public class Target {static class Fork {}static class Philosopher extends Thread {Fork left, right;public Philosopher(Fork left, Fork right) {this.left = left;this.right = right;}public void run() {synchronized (left) {synchronized (right) {}}}}static int nPhilosophers = 6;public static void main(String[] args) {if (args.length > 0){nPhilosophers = Integer.parseInt(args[0]);}Fork[] forks = new Fork[nPhilosophers];for (int i = 0; i < nPhilosophers; i++) {forks[i] = new Fork();}for (int i = 0; i < nPhilosophers; i++) {Philosopher p = new Philosopher(forks[i], forks[(i + 1) % nPhilosophers]);p.start();}}}
      [1 insn w/o sources]
  Target.java:1                  : public class Target {static class Fork {}static class Philosopher extends Thread {Fork left, right;public Philosopher(Fork left, Fork right) {this.left = left;this.right = right;}public void run() {synchronized (left) {synchronized (right) {}}}}static int nPhilosophers = 6;public static void main(String[] args) {if (args.length > 0){nPhilosophers = Integer.parseInt(args[0]);}Fork[] forks = new Fork[nPhilosophers];for (int i = 0; i < nPhilosophers; i++) {forks[i] = new Fork();}for (int i = 0; i < nPhilosophers; i++) {Philosopher p = new Philosopher(forks[i], forks[(i + 1) % nPhilosophers]);p.start();}}}
      [1 insn w/o sources]
  Target.java:1                  : public class Target {static class Fork {}static class Philosopher extends Thread {Fork left, right;public Philosopher(Fork left, Fork right) {this.left = left;this.right = right;}public void run() {synchronized (left) {synchronized (right) {}}}}static int nPhilosophers = 6;public static void main(String[] args) {if (args.length > 0){nPhilosophers = Integer.parseInt(args[0]);}Fork[] forks = new Fork[nPhilosophers];for (int i = 0; i < nPhilosophers; i++) {forks[i] = new Fork();}for (int i = 0; i < nPhilosophers; i++) {Philosopher p = new Philosopher(forks[i], forks[(i + 1) % nPhilosophers]);p.start();}}}
      [1 insn w/o sources]
  Target.java:1                  : public class Target {static class Fork {}static class Philosopher extends Thread {Fork left, right;public Philosopher(Fork left, Fork right) {this.left = left;this.right = right;}public void run() {synchronized (left) {synchronized (right) {}}}}static int nPhilosophers = 6;public static void main(String[] args) {if (args.length > 0){nPhilosophers = Integer.parseInt(args[0]);}Fork[] forks = new Fork[nPhilosophers];for (int i = 0; i < nPhilosophers; i++) {forks[i] = new Fork();}for (int i = 0; i < nPhilosophers; i++) {Philosopher p = new Philosopher(forks[i], forks[(i + 1) % nPhilosophers]);p.start();}}}
      [136 insn w/o sources]
  Target.java:1                  : public class Target {static class Fork {}static class Philosopher extends Thread {Fork left, right;public Philosopher(Fork left, Fork right) {this.left = left;this.right = right;}public void run() {synchronized (left) {synchronized (right) {}}}}static int nPhilosophers = 6;public static void main(String[] args) {if (args.length > 0){nPhilosophers = Integer.parseInt(args[0]);}Fork[] forks = new Fork[nPhilosophers];for (int i = 0; i < nPhilosophers; i++) {forks[i] = new Fork();}for (int i = 0; i < nPhilosophers; i++) {Philosopher p = new Philosopher(forks[i], forks[(i + 1) % nPhilosophers]);p.start();}}}
      [1 insn w/o sources]
------------------------------------------------------ transition #1 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"THREAD_START" ,1/2,isCascaded:false}
      [2 insn w/o sources]
  Target.java:1                  : public class Target {static class Fork {}static class Philosopher extends Thread {Fork left, right;public Philosopher(Fork left, Fork right) {this.left = left;this.right = right;}public void run() {synchronized (left) {synchronized (right) {}}}}static int nPhilosophers = 6;public static void main(String[] args) {if (args.length > 0){nPhilosophers = Integer.parseInt(args[0]);}Fork[] forks = new Fork[nPhilosophers];for (int i = 0; i < nPhilosophers; i++) {forks[i] = new Fork();}for (int i = 0; i < nPhilosophers; i++) {Philosopher p = new Philosopher(forks[i], forks[(i + 1) % nPhilosophers]);p.start();}}}
      [136 insn w/o sources]
  Target.java:1                  : public class Target {static class Fork {}static class Philosopher extends Thread {Fork left, right;public Philosopher(Fork left, Fork right) {this.left = left;this.right = right;}public void run() {synchronized (left) {synchronized (right) {}}}}static int nPhilosophers = 6;public static void main(String[] args) {if (args.length > 0){nPhilosophers = Integer.parseInt(args[0]);}Fork[] forks = new Fork[nPhilosophers];for (int i = 0; i < nPhilosophers; i++) {forks[i] = new Fork();}for (int i = 0; i < nPhilosophers; i++) {Philosopher p = new Philosopher(forks[i], forks[(i + 1) % nPhilosophers]);p.start();}}}
      [1 insn w/o sources]
------------------------------------------------------ transition #2 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"THREAD_START" ,1/3,isCascaded:false}
      [2 insn w/o sources]
  Target.java:1                  : public class Target {static class Fork {}static class Philosopher extends Thread {Fork left, right;public Philosopher(Fork left, Fork right) {this.left = left;this.right = right;}public void run() {synchronized (left) {synchronized (right) {}}}}static int nPhilosophers = 6;public static void main(String[] args) {if (args.length > 0){nPhilosophers = Integer.parseInt(args[0]);}Fork[] forks = new Fork[nPhilosophers];for (int i = 0; i < nPhilosophers; i++) {forks[i] = new Fork();}for (int i = 0; i < nPhilosophers; i++) {Philosopher p = new Philosopher(forks[i], forks[(i + 1) % nPhilosophers]);p.start();}}}
      [136 insn w/o sources]
  Target.java:1                  : public class Target {static class Fork {}static class Philosopher extends Thread {Fork left, right;public Philosopher(Fork left, Fork right) {this.left = left;this.right = right;}public void run() {synchronized (left) {synchronized (right) {}}}}static int nPhilosophers = 6;public static void main(String[] args) {if (args.length > 0){nPhilosophers = Integer.parseInt(args[0]);}Fork[] forks = new Fork[nPhilosophers];for (int i = 0; i < nPhilosophers; i++) {forks[i] = new Fork();}for (int i = 0; i < nPhilosophers; i++) {Philosopher p = new Philosopher(forks[i], forks[(i + 1) % nPhilosophers]);p.start();}}}
      [1 insn w/o sources]
------------------------------------------------------ transition #3 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"THREAD_START" ,1/4,isCascaded:false}
      [2 insn w/o sources]
  Target.java:1                  : public class Target {static class Fork {}static class Philosopher extends Thread {Fork left, right;public Philosopher(Fork left, Fork right) {this.left = left;this.right = right;}public void run() {synchronized (left) {synchronized (right) {}}}}static int nPhilosophers = 6;public static void main(String[] args) {if (args.length > 0){nPhilosophers = Integer.parseInt(args[0]);}Fork[] forks = new Fork[nPhilosophers];for (int i = 0; i < nPhilosophers; i++) {forks[i] = new Fork();}for (int i = 0; i < nPhilosophers; i++) {Philosopher p = new Philosopher(forks[i], forks[(i + 1) % nPhilosophers]);p.start();}}}
      [136 insn w/o sources]
  Target.java:1                  : public class Target {static class Fork {}static class Philosopher extends Thread {Fork left, right;public Philosopher(Fork left, Fork right) {this.left = left;this.right = right;}public void run() {synchronized (left) {synchronized (right) {}}}}static int nPhilosophers = 6;public static void main(String[] args) {if (args.length > 0){nPhilosophers = Integer.parseInt(args[0]);}Fork[] forks = new Fork[nPhilosophers];for (int i = 0; i < nPhilosophers; i++) {forks[i] = new Fork();}for (int i = 0; i < nPhilosophers; i++) {Philosopher p = new Philosopher(forks[i], forks[(i + 1) % nPhilosophers]);p.start();}}}
      [1 insn w/o sources]
------------------------------------------------------ transition #4 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"THREAD_START" ,1/5,isCascaded:false}
      [2 insn w/o sources]
  Target.java:1                  : public class Target {static class Fork {}static class Philosopher extends Thread {Fork left, right;public Philosopher(Fork left, Fork right) {this.left = left;this.right = right;}public void run() {synchronized (left) {synchronized (right) {}}}}static int nPhilosophers = 6;public static void main(String[] args) {if (args.length > 0){nPhilosophers = Integer.parseInt(args[0]);}Fork[] forks = new Fork[nPhilosophers];for (int i = 0; i < nPhilosophers; i++) {forks[i] = new Fork();}for (int i = 0; i < nPhilosophers; i++) {Philosopher p = new Philosopher(forks[i], forks[(i + 1) % nPhilosophers]);p.start();}}}
      [136 insn w/o sources]
  Target.java:1                  : public class Target {static class Fork {}static class Philosopher extends Thread {Fork left, right;public Philosopher(Fork left, Fork right) {this.left = left;this.right = right;}public void run() {synchronized (left) {synchronized (right) {}}}}static int nPhilosophers = 6;public static void main(String[] args) {if (args.length > 0){nPhilosophers = Integer.parseInt(args[0]);}Fork[] forks = new Fork[nPhilosophers];for (int i = 0; i < nPhilosophers; i++) {forks[i] = new Fork();}for (int i = 0; i < nPhilosophers; i++) {Philosopher p = new Philosopher(forks[i], forks[(i + 1) % nPhilosophers]);p.start();}}}
      [1 insn w/o sources]
------------------------------------------------------ transition #5 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"THREAD_START" ,1/6,isCascaded:false}
      [2 insn w/o sources]
  Target.java:1                  : public class Target {static class Fork {}static class Philosopher extends Thread {Fork left, right;public Philosopher(Fork left, Fork right) {this.left = left;this.right = right;}public void run() {synchronized (left) {synchronized (right) {}}}}static int nPhilosophers = 6;public static void main(String[] args) {if (args.length > 0){nPhilosophers = Integer.parseInt(args[0]);}Fork[] forks = new Fork[nPhilosophers];for (int i = 0; i < nPhilosophers; i++) {forks[i] = new Fork();}for (int i = 0; i < nPhilosophers; i++) {Philosopher p = new Philosopher(forks[i], forks[(i + 1) % nPhilosophers]);p.start();}}}
      [136 insn w/o sources]
  Target.java:1                  : public class Target {static class Fork {}static class Philosopher extends Thread {Fork left, right;public Philosopher(Fork left, Fork right) {this.left = left;this.right = right;}public void run() {synchronized (left) {synchronized (right) {}}}}static int nPhilosophers = 6;public static void main(String[] args) {if (args.length > 0){nPhilosophers = Integer.parseInt(args[0]);}Fork[] forks = new Fork[nPhilosophers];for (int i = 0; i < nPhilosophers; i++) {forks[i] = new Fork();}for (int i = 0; i < nPhilosophers; i++) {Philosopher p = new Philosopher(forks[i], forks[(i + 1) % nPhilosophers]);p.start();}}}
      [1 insn w/o sources]
------------------------------------------------------ transition #6 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"THREAD_START" ,2/7,isCascaded:false}
      [1 insn w/o sources]
  Target.java:1                  : public class Target {static class Fork {}static class Philosopher extends Thread {Fork left, right;public Philosopher(Fork left, Fork right) {this.left = left;this.right = right;}public void run() {synchronized (left) {synchronized (right) {}}}}static int nPhilosophers = 6;public static void main(String[] args) {if (args.length > 0){nPhilosophers = Integer.parseInt(args[0]);}Fork[] forks = new Fork[nPhilosophers];for (int i = 0; i < nPhilosophers; i++) {forks[i] = new Fork();}for (int i = 0; i < nPhilosophers; i++) {Philosopher p = new Philosopher(forks[i], forks[(i + 1) % nPhilosophers]);p.start();}}}
------------------------------------------------------ transition #7 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"MONITOR_ENTER" ,1/7,isCascaded:false}
      [2 insn w/o sources]
  Target.java:1                  : public class Target {static class Fork {}static class Philosopher extends Thread {Fork left, right;public Philosopher(Fork left, Fork right) {this.left = left;this.right = right;}public void run() {synchronized (left) {synchronized (right) {}}}}static int nPhilosophers = 6;public static void main(String[] args) {if (args.length > 0){nPhilosophers = Integer.parseInt(args[0]);}Fork[] forks = new Fork[nPhilosophers];for (int i = 0; i < nPhilosophers; i++) {forks[i] = new Fork();}for (int i = 0; i < nPhilosophers; i++) {Philosopher p = new Philosopher(forks[i], forks[(i + 1) % nPhilosophers]);p.start();}}}
      [1 insn w/o sources]
------------------------------------------------------ transition #8 thread: 6
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"THREAD_TERMINATE" ,6/6,isCascaded:false}
      [1 insn w/o sources]
  Target.java:1                  : public class Target {static class Fork {}static class Philosopher extends Thread {Fork left, right;public Philosopher(Fork left, Fork right) {this.left = left;this.right = right;}public void run() {synchronized (left) {synchronized (right) {}}}}static int nPhilosophers = 6;public static void main(String[] args) {if (args.length > 0){nPhilosophers = Integer.parseInt(args[0]);}Fork[] forks = new Fork[nPhilosophers];for (int i = 0; i < nPhilosophers; i++) {forks[i] = new Fork();}for (int i = 0; i < nPhilosophers; i++) {Philosopher p = new Philosopher(forks[i], forks[(i + 1) % nPhilosophers]);p.start();}}}
------------------------------------------------------ transition #9 thread: 5
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"MONITOR_ENTER" ,5/6,isCascaded:false}
      [1 insn w/o sources]
  Target.java:1                  : public class Target {static class Fork {}static class Philosopher extends Thread {Fork left, right;public Philosopher(Fork left, Fork right) {this.left = left;this.right = right;}public void run() {synchronized (left) {synchronized (right) {}}}}static int nPhilosophers = 6;public static void main(String[] args) {if (args.length > 0){nPhilosophers = Integer.parseInt(args[0]);}Fork[] forks = new Fork[nPhilosophers];for (int i = 0; i < nPhilosophers; i++) {forks[i] = new Fork();}for (int i = 0; i < nPhilosophers; i++) {Philosopher p = new Philosopher(forks[i], forks[(i + 1) % nPhilosophers]);p.start();}}}
------------------------------------------------------ transition #10 thread: 4
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"MONITOR_ENTER" ,4/5,isCascaded:false}
      [1 insn w/o sources]
  Target.java:1                  : public class Target {static class Fork {}static class Philosopher extends Thread {Fork left, right;public Philosopher(Fork left, Fork right) {this.left = left;this.right = right;}public void run() {synchronized (left) {synchronized (right) {}}}}static int nPhilosophers = 6;public static void main(String[] args) {if (args.length > 0){nPhilosophers = Integer.parseInt(args[0]);}Fork[] forks = new Fork[nPhilosophers];for (int i = 0; i < nPhilosophers; i++) {forks[i] = new Fork();}for (int i = 0; i < nPhilosophers; i++) {Philosopher p = new Philosopher(forks[i], forks[(i + 1) % nPhilosophers]);p.start();}}}
------------------------------------------------------ transition #11 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"MONITOR_ENTER" ,3/4,isCascaded:false}
      [1 insn w/o sources]
  Target.java:1                  : public class Target {static class Fork {}static class Philosopher extends Thread {Fork left, right;public Philosopher(Fork left, Fork right) {this.left = left;this.right = right;}public void run() {synchronized (left) {synchronized (right) {}}}}static int nPhilosophers = 6;public static void main(String[] args) {if (args.length > 0){nPhilosophers = Integer.parseInt(args[0]);}Fork[] forks = new Fork[nPhilosophers];for (int i = 0; i < nPhilosophers; i++) {forks[i] = new Fork();}for (int i = 0; i < nPhilosophers; i++) {Philosopher p = new Philosopher(forks[i], forks[(i + 1) % nPhilosophers]);p.start();}}}
------------------------------------------------------ transition #12 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"MONITOR_ENTER" ,2/3,isCascaded:false}
      [1 insn w/o sources]
  Target.java:1                  : public class Target {static class Fork {}static class Philosopher extends Thread {Fork left, right;public Philosopher(Fork left, Fork right) {this.left = left;this.right = right;}public void run() {synchronized (left) {synchronized (right) {}}}}static int nPhilosophers = 6;public static void main(String[] args) {if (args.length > 0){nPhilosophers = Integer.parseInt(args[0]);}Fork[] forks = new Fork[nPhilosophers];for (int i = 0; i < nPhilosophers; i++) {forks[i] = new Fork();}for (int i = 0; i < nPhilosophers; i++) {Philosopher p = new Philosopher(forks[i], forks[(i + 1) % nPhilosophers]);p.start();}}}
------------------------------------------------------ transition #13 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"MONITOR_ENTER" ,1/2,isCascaded:false}
  Target.java:1                  : public class Target {static class Fork {}static class Philosopher extends Thread {Fork left, right;public Philosopher(Fork left, Fork right) {this.left = left;this.right = right;}public void run() {synchronized (left) {synchronized (right) {}}}}static int nPhilosophers = 6;public static void main(String[] args) {if (args.length > 0){nPhilosophers = Integer.parseInt(args[0]);}Fork[] forks = new Fork[nPhilosophers];for (int i = 0; i < nPhilosophers; i++) {forks[i] = new Fork();}for (int i = 0; i < nPhilosophers; i++) {Philosopher p = new Philosopher(forks[i], forks[(i + 1) % nPhilosophers]);p.start();}}}

====================================================== results
error #1: gov.nasa.jpf.vm.NotDeadlockedProperty "deadlock encountered:    thread Target$Philosopher..."

====================================================== statistics
elapsed time:       00:00:01
states:             new=207,visited=381,backtracked=574,end=13
search:             maxDepth=18,constraints=0
choice generators:  thread=206 (signal=0,lock=48,sharedRef=0,threadApi=6,reschedule=152), data=0
heap:               new=432,released=2661,maxLive=411,gcCycles=588
instructions:       12398
max memory:         60MB
loaded code:        classes=65,methods=1321

====================================================== search finished: 5/1/14 10:13 AM
